using System;
using System.IO;
using System.Xml;
using openDicom.DataStructure.DataSet;
using openDicom.Encoding;
using openDicom.Registry;
using DateTime = System.DateTime;

namespace openDicom.File
{
    public class XmlFile
    {
        private static readonly string fileComment =
            "This file was automatically generated by openDICOM#.";

        private readonly AcrNemaFile acrNemaFile;

        public XmlFile(AcrNemaFile acrNemaFile)
        {
            this.acrNemaFile = acrNemaFile;
        }

        public XmlFile(AcrNemaFile acrNemaFile, bool excludePixelData) :
            this(acrNemaFile)
        {
            IsPixelDataExcluded = excludePixelData;
        }

        public AcrNemaFile AcrNemaFile
        {
            get
            {
                if (acrNemaFile != null)
                    return acrNemaFile;
                throw new DicomException("ACR-NEMA file is null.",
                    "XmlFile.AcrNemaFile");
            }
        }

        public bool IsDicomFile
        {
            get { return AcrNemaFile is DicomFile; }
        }

        public bool IsPixelDataExcluded { set; get; }

        public static bool IsXmlFile(string fileName)
        {
            var fileStream = new FileStream(fileName, FileMode.Open,
                FileAccess.Read);
            try
            {
                var xml = new XmlTextReader(fileStream);
                xml.MoveToContent();
                return xml.IsStartElement("AcrNemaFile") ||
                       xml.IsStartElement("DicomFile");
            }
            catch (Exception)
            {
                return false;
            }
            finally
            {
                fileStream.Close();
            }
        }

        public void SaveTo(string fileName)
        {
            var fileStream = new FileStream(fileName, FileMode.Create,
                FileAccess.Write);
            try
            {
                SaveTo(fileStream);
            }
            finally
            {
                fileStream.Close();
            }
        }

        private void AddBase64ValueToXml(XmlTextWriter xml, byte[] bytes)
        {
            var base64Value = Convert.ToBase64String(bytes);
            xml.WriteString(base64Value);
        }

        private void AddValueToXml(XmlTextWriter xml, object value,
            bool isDate)
        {
            if (value is ushort[])
            {
                var bytes = ByteConvert.ToBytes((ushort[]) value);
                xml.WriteAttributeString("encoding", "Base64");
                AddBase64ValueToXml(xml, bytes);
            }
            else if (value is byte[])
            {
                xml.WriteAttributeString("encoding", "Base64");
                AddBase64ValueToXml(xml, (byte[]) value);
            }
            else if (isDate)
            {
                // hide zero valued time
                xml.WriteString(((DateTime) value).ToShortDateString());
            }
            else
                xml.WriteString(value.ToString());
        }

        private void AddDataElementToXml(XmlTextWriter xml,
            DataElement element)
        {
            xml.WriteStartElement("DataElement");
            xml.WriteAttributeString("streamPosition", element.StreamPosition.ToString());
            xml.WriteElementString("Tag", element.Tag.ToString());
            xml.WriteElementString("VR", element.VR.ToString());
            xml.WriteElementString("VM",
                element.Tag.GetDictionaryEntry().VM.ToString());
            xml.WriteElementString("Description",
                element.Tag.GetDictionaryEntry().Description);
            xml.WriteElementString("ValueLength", element.ValueLength.ToString());
            if (element.Value.IsSequence)
            {
                xml.WriteStartElement("Sequence");
                xml.WriteAttributeString("elementCount",
                    ((Sequence) element.Value[0]).Count.ToString());
                foreach (DataElement d in (Sequence) element.Value[0])
                    AddDataElementToXml(xml, d);
            }
            else if (element.Value.IsNestedDataSet)
            {
                xml.WriteStartElement("NestedDataSet");
                xml.WriteAttributeString("elementCount",
                    ((NestedDataSet) element.Value[0]).Count.ToString());
                foreach (DataElement d in (NestedDataSet) element.Value[0])
                    AddDataElementToXml(xml, d);
            }
            else if (element.Value.IsMultiValue)
            {
                xml.WriteStartElement("MultiValue");
                xml.WriteAttributeString("count", element.Value.Count.ToString());
                var valueArray = element.Value.ToArray();
                for (var i = 0; i < valueArray.Length; i++)
                {
                    xml.WriteStartElement("Value");
                    xml.WriteAttributeString("order", i.ToString());
                    AddValueToXml(xml, valueArray[i], element.Value.IsDate);
                    xml.WriteEndElement();
                }
            }
            else if (element.Value.IsUid)
            {
                var uid = (Uid) element.Value[0];
                xml.WriteStartElement("Uid");
                xml.WriteStartElement("Value");
                AddValueToXml(xml, uid, element.Value.IsDate);
                xml.WriteEndElement();
                xml.WriteStartElement("Name");
                AddValueToXml(xml, uid.GetDictionaryEntry().Name,
                    element.Value.IsDate);
                xml.WriteEndElement();
                xml.WriteStartElement("Type");
                AddValueToXml(xml, Enum.GetName(typeof(UidType),
                    uid.GetDictionaryEntry().Type), element.Value.IsDate);
                xml.WriteEndElement();
            }
            else
            {
                xml.WriteStartElement("Value");
                if (!element.Value.IsEmpty)
                    AddValueToXml(xml, element.Value[0], element.Value.IsDate);
            }
            // Value
            xml.WriteEndElement();
            // DataElement
            xml.WriteEndElement();
        }

        private void AddDataSetToXml(XmlTextWriter xml, DataSet dataSet)
        {
            foreach (DataElement element in dataSet)
            {
                if (element.Tag.Group.Equals("7FE0"))
                {
                    if (!IsPixelDataExcluded)
                        AddDataElementToXml(xml, element);
                }
                else
                    AddDataElementToXml(xml, element);
            }
        }

        private void AddTransferSyntaxToXml(XmlTextWriter xml,
            TransferSyntax transferSyntax)
        {
            xml.WriteStartElement("TransferSyntax");
            xml.WriteElementString("Uid", transferSyntax.Uid.ToString());
            xml.WriteElementString("Description",
                transferSyntax.Uid.GetDictionaryEntry().Name);
            xml.WriteEndElement();
        }

        public virtual void SaveTo(Stream stream)
        {
            var xml = new XmlTextWriter(stream,
                System.Text.Encoding.UTF8);
            xml.Formatting = Formatting.Indented;
            xml.Indentation = 4;
            try
            {
                xml.WriteStartDocument();
                xml.WriteComment(" " + fileComment + " ");
                if (IsDicomFile)
                {
                    xml.WriteStartElement("DicomFile");
                    xml.WriteStartElement("MetaInformation");
                    AddTransferSyntaxToXml(xml,
                        ((DicomFile) AcrNemaFile).MetaInformation.TransferSyntax);
                    xml.WriteElementString("FilePreamble",
                        ((DicomFile) AcrNemaFile).MetaInformation.FilePreamble);
                    AddDataSetToXml(xml, ((DicomFile) AcrNemaFile).MetaInformation);
                    xml.WriteEndElement();
                    xml.WriteStartElement("DataSet");
                    AddTransferSyntaxToXml(xml,
                        AcrNemaFile.DataSet.TransferSyntax);
                    AddDataSetToXml(xml, AcrNemaFile.DataSet);
                    // DataSet
                    xml.WriteEndElement();
                    // DicomFile
                    xml.WriteEndElement();
                }
                else
                {
                    xml.WriteStartElement("AcrNemaFile");
                    AddTransferSyntaxToXml(xml,
                        AcrNemaFile.DataSet.TransferSyntax);
                    AddDataSetToXml(xml, AcrNemaFile.DataSet);
                    xml.WriteEndElement();
                }
                xml.WriteEndDocument();
                xml.Close();
            }
            finally
            {
                xml.Close();
            }
        }
    }
}