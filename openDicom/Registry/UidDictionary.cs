using System;
using System.Collections;
using System.IO;
using System.Text.RegularExpressions;
using System.Xml;
using openDicom.Encoding;

namespace openDicom.Registry
{
    public class UidDictionary : IDicomDictionary
    {
        private static UidDictionary global;

        private static readonly string fileComment =
            "This file was automatically generated by the openDICOM.NET " +
            "class library.";

        private readonly Hashtable hashTable = new Hashtable(198);

        public UidDictionary()
        {
        }

        public UidDictionary(string fileName, DictionaryFileFormat fileFormat)
        {
            LoadFrom(fileName, fileFormat);
        }

        public static UidDictionary Global
        {
            get
            {
                if (global == null || global.IsEmpty)
                    throw new DicomException(
                        "No global UID dictionary available." +
                        "Possibly it has not been initialized or is empty.");
                return global;
            }
            set
            {
                if (value == null || value.IsEmpty)
                    throw new DicomException(
                        "UidDictionary.Global is null or empty.");
                global = value;
            }
        }

        public UidDictionaryEntry this[Uid index]
        {
            get
            {
                if (index != null)
                    return (UidDictionaryEntry) hashTable[index.ToString()];
                throw new DicomException("index is null.",
                    "UidDictionary[index]");
            }
        }

        public int Count
        {
            get { return hashTable.Count; }
        }

        public bool IsEmpty
        {
            get { return Count == 0; }
        }

        public void LoadFrom(string fileName, DictionaryFileFormat fileFormat)
        {
            if (!IsEmpty) Clear();
            var streamReader = new StreamReader(fileName);
            switch (fileFormat)
            {
                case DictionaryFileFormat.BinaryFile:
                    LoadFromBinary(streamReader);
                    break;
                case DictionaryFileFormat.PropertyFile:
                    LoadFromProperty(streamReader);
                    break;
                case DictionaryFileFormat.CsvFile:
                    LoadFromCsv(streamReader);
                    break;
                case DictionaryFileFormat.XmlFile:
                    LoadFromXml(streamReader);
                    break;
            }
            streamReader.Close();
            if (global == null) Global = this;
        }

        public void SaveTo(string fileName, DictionaryFileFormat fileFormat)
        {
            var streamWriter = new StreamWriter(fileName);
            switch (fileFormat)
            {
                case DictionaryFileFormat.BinaryFile:
                    SaveAsBinary(streamWriter, ToArray());
                    break;
                case DictionaryFileFormat.PropertyFile:
                    SaveAsProperty(streamWriter, ToArray());
                    break;
                case DictionaryFileFormat.CsvFile:
                    SaveAsCsv(streamWriter, ToArray());
                    break;
                case DictionaryFileFormat.XmlFile:
                    SaveAsXml(streamWriter, ToArray());
                    break;
            }
            streamWriter.Close();
        }

        private void LoadFromBinary(StreamReader streamReader)
        {
            var binaryReader = new BinaryReader(streamReader.BaseStream);
            while (streamReader.BaseStream.Position < streamReader.BaseStream.Length)
            {
                try
                {
                    var length = binaryReader.ReadInt32();
                    var buffer = new byte[length];
                    binaryReader.Read(buffer, 0, length);
                    var stringUid = ByteConvert.ToString(buffer,
                        CharacterRepertoire.Ascii);
                    var uid = new Uid(stringUid);
                    length = binaryReader.ReadInt32();
                    buffer = new byte[length];
                    binaryReader.Read(buffer, 0, length);
                    var name = ByteConvert.ToString(buffer,
                        CharacterRepertoire.Ascii);
                    var intType = binaryReader.ReadInt32();
                    var type = (UidType) Enum.ToObject(typeof(UidType),
                        intType);
                    var retired = binaryReader.ReadBoolean();
                    var entry =
                        new UidDictionaryEntry(uid, name, type, retired);
                    Add(entry);
                }
                catch (Exception e)
                {
                    throw new DicomException("Wrong entry before index " +
                                             streamReader.BaseStream.Position + ": " + e.Message);
                }
            }
        }

        private void LoadFromProperty(TextReader textReader)
        {
            var line = textReader.ReadLine();
            var lineNumber = 1;
            string[] result = null;
            while (line != null)
            {
                var lineWithoutSpaces = line.Replace(" ", null);
                if (!lineWithoutSpaces.StartsWith("#") &&
                    !lineWithoutSpaces.Equals(""))
                {
                    if (Regex.IsMatch(lineWithoutSpaces,
                        "^[0-9\\.]+=[^,]+,[^,]+(,RET)?$"))
                    {
                        result = line.Split('=');
                        var uid = result[0];
                        result = result[1].Split(',');
                        var retired = result.Length == 3 ? "RET" : null;
                        try
                        {
                            var entry =
                                new UidDictionaryEntry(uid,
                                    result[0].Trim(), result[1].Trim(),
                                    retired);
                            Add(entry);
                        }
                        catch (Exception e)
                        {
                            throw new DicomException("Wrong entry in line " +
                                                     lineNumber + ": " + e.Message);
                        }
                    }
                    else
                        throw new DicomException("Wrong entry in line " +
                                                 lineNumber + ".");
                }
                line = textReader.ReadLine();
                lineNumber++;
            }
        }

        private void LoadFromCsv(TextReader textReader)
        {
            var line = textReader.ReadLine();
            var lineNumber = 1;
            string[] result = null;
            while (line != null)
            {
                var lineWithoutSpaces = line.Replace(" ", null);
                if (!lineWithoutSpaces.StartsWith("#") &&
                    !lineWithoutSpaces.Equals(""))
                {
                    if (Regex.IsMatch(lineWithoutSpaces,
                        "^[0-9\\.]+;[^;]+;[^;]+(;RET)?$"))
                    {
                        result = line.Split(';');
                        var uid = result[0];
                        var retired = result.Length == 4 ? "RET" : null;
                        try
                        {
                            var entry =
                                new UidDictionaryEntry(uid,
                                    result[1].Trim(), result[2].Trim(),
                                    retired);
                            Add(entry);
                        }
                        catch (Exception e)
                        {
                            throw new DicomException("Wrong entry in line " +
                                                     lineNumber + ": " + e.Message);
                        }
                    }
                    else
                        throw new DicomException("Wrong entry in line " +
                                                 lineNumber + ".");
                }
                line = textReader.ReadLine();
                lineNumber++;
            }
        }

        protected virtual void LoadFromXml(TextReader textReader)
        {
            var xmlTextReader = new XmlTextReader(textReader);
            string uid = null;
            string name = null;
            string type = null;
            string retired = null;
            while (xmlTextReader.Read())
            {
                switch (xmlTextReader.Name)
                {
                    case "DictionaryEntry":
                        retired = xmlTextReader["retired"];
                        break;
                    case "Uid":
                        xmlTextReader.MoveToContent();
                        uid = xmlTextReader.ReadString();
                        break;
                    case "Name":
                        xmlTextReader.MoveToContent();
                        name = xmlTextReader.ReadString();
                        break;
                    case "Type":
                        xmlTextReader.MoveToContent();
                        type = xmlTextReader.ReadString();
                        break;
                }
                if (uid != null && name != null && type != null)
                {
                    try
                    {
                        var entry =
                            new UidDictionaryEntry(uid, name.Trim(),
                                type.Trim(), retired);
                        Add(entry);
                    }
                    catch (Exception e)
                    {
                        throw new DicomException("Wrong entry at UID " +
                                                 uid + ": " + e.Message);
                    }
                    uid = name = type = retired = null;
                }
            }
            xmlTextReader.Close();
        }

        private void SaveAsBinary(StreamWriter streamWriter,
            UidDictionaryEntry[] entryArray)
        {
            streamWriter.AutoFlush = true;
            var binaryWriter = new BinaryWriter(streamWriter.BaseStream);
            foreach (var entry in entryArray)
            {
                binaryWriter.Write(entry.Uid.Value.Length);
                streamWriter.Write(entry.Uid.Value);
                binaryWriter.Write(entry.Name.Length);
                streamWriter.Write(entry.Name);
                binaryWriter.Write((int) entry.Type);
                binaryWriter.Write(entry.IsRetired);
            }
        }

        private void SaveAsProperty(TextWriter textWriter,
            UidDictionaryEntry[] entryArray)
        {
            textWriter.WriteLine("# " + fileComment);
            foreach (var entry in entryArray)
            {
                if (entry.IsRetired)
                    textWriter.WriteLine(entry.Uid + " = " +
                                         entry.Name + ", " +
                                         Enum.GetName(typeof(UidType), entry.Type) +
                                         ", RET");
                else
                    textWriter.WriteLine(entry.Uid + " = " +
                                         entry.Name + ", " +
                                         Enum.GetName(typeof(UidType), entry.Type));
            }
        }

        private void SaveAsCsv(TextWriter textWriter,
            UidDictionaryEntry[] entryArray)
        {
            textWriter.WriteLine("# " + fileComment);
            foreach (var entry in entryArray)
            {
                if (entry.IsRetired)
                    textWriter.WriteLine(entry.Uid + "; " +
                                         entry.Name + "; " +
                                         Enum.GetName(typeof(UidType), entry.Type) +
                                         "; RET");
                else
                    textWriter.WriteLine(entry.Uid + "; " +
                                         entry.Name + "; " +
                                         Enum.GetName(typeof(UidType), entry.Type));
            }
        }

        protected virtual void SaveAsXml(TextWriter textWriter,
            UidDictionaryEntry[] entryArray)
        {
            var xmlTextWriter = new XmlTextWriter(textWriter);
            xmlTextWriter.Formatting = Formatting.Indented;
            xmlTextWriter.Indentation = 4;
            xmlTextWriter.WriteStartDocument();
            xmlTextWriter.WriteComment(" " + fileComment + " ");
            xmlTextWriter.WriteStartElement("DicomUidDictionary");
            foreach (var entry in entryArray)
            {
                xmlTextWriter.WriteStartElement("DictionaryEntry");
                if (entry.IsRetired)
                    xmlTextWriter.WriteAttributeString("retired", "true");
                xmlTextWriter.WriteElementString("Uid", entry.Uid.ToString());
                xmlTextWriter.WriteElementString("Name", entry.Name);
                xmlTextWriter.WriteElementString("Type",
                    Enum.GetName(typeof(UidType), entry.Type));
                xmlTextWriter.WriteEndElement();
            }
            xmlTextWriter.WriteEndElement();
            xmlTextWriter.Close();
        }

        public UidDictionaryEntry[] ToArray()
        {
            var entryArray =
                new UidDictionaryEntry[Count];
            hashTable.Values.CopyTo(entryArray, 0);
            Array.Sort(entryArray);
            return entryArray;
        }

        public void Add(UidDictionaryEntry entry)
        {
            if (entry != null)
            {
                if (!Contains(entry.Uid))
                    hashTable.Add(entry.Uid.ToString(), entry);
                else
                    throw new DicomException(
                        "UID already exists in UID dictionary.",
                        "entry.Uid", entry.Uid.ToString());
            }
            else
                throw new DicomException("entry is null.", "entry");
        }

        public void Clear()
        {
            hashTable.Clear();
        }

        public bool Contains(Uid uid)
        {
            return hashTable.Contains(uid.ToString());
        }

        public UidDictionaryEntry GetDictionaryEntry(Uid uid)
        {
            return this[uid];
        }
    }
}