using System;
using System.Collections;
using System.Globalization;
using System.IO;
using System.Text.RegularExpressions;
using System.Xml;
using openDicom.DataStructure;
using openDicom.Encoding;

namespace openDicom.Registry
{
    public class DataElementDictionary : IDicomDictionary
    {
        private static DataElementDictionary global;

        private static readonly string fileComment =
            "This file was automatically generated by the openDICOM.NET " +
            "class library.";

        private readonly Hashtable hashTable = new Hashtable(2590);

        public DataElementDictionary()
        {
        }

        public DataElementDictionary(string fileName,
            DictionaryFileFormat fileFormat)
        {
            LoadFrom(fileName, fileFormat);
        }

        public static DataElementDictionary Global
        {
            get
            {
                if (global == null || global.IsEmpty)
                    throw new DicomException(
                        "No global data element dictionary available." +
                        "Possibly it has not been initialized or is empty.");
                return global;
            }
            set
            {
                if (value == null || value.IsEmpty)
                    throw new DicomException(
                        "DataElementDictionary.Global is null or empty.");
                global = value;
            }
        }

        public DataElementDictionaryEntry this[Tag index]
        {
            get
            {
                if (index != null)
                    return (DataElementDictionaryEntry)
                        hashTable[index.ToString()];
                throw new DicomException("index is null.",
                    "DataElementDictionary[index]");
            }
        }

        public int Count
        {
            get { return hashTable.Count; }
        }

        public bool IsEmpty
        {
            get { return Count == 0; }
        }

        public void LoadFrom(string fileName, DictionaryFileFormat fileFormat)
        {
            if (!IsEmpty) Clear();
            var streamReader = new StreamReader(fileName);
            switch (fileFormat)
            {
                case DictionaryFileFormat.BinaryFile:
                    LoadFromBinary(streamReader);
                    break;
                case DictionaryFileFormat.PropertyFile:
                    LoadFromProperty(streamReader);
                    break;
                case DictionaryFileFormat.CsvFile:
                    LoadFromCsv(streamReader);
                    break;
                case DictionaryFileFormat.XmlFile:
                    LoadFromXml(streamReader);
                    break;
            }
            streamReader.Close();
            if (global == null) Global = this;
        }

        public void SaveTo(string fileName, DictionaryFileFormat fileFormat)
        {
            var streamWriter = new StreamWriter(fileName);
            switch (fileFormat)
            {
                case DictionaryFileFormat.BinaryFile:
                    SaveAsBinary(streamWriter, ToArray());
                    break;
                case DictionaryFileFormat.PropertyFile:
                    SaveAsProperty(streamWriter, ToArray());
                    break;
                case DictionaryFileFormat.CsvFile:
                    SaveAsCsv(streamWriter, ToArray());
                    break;
                case DictionaryFileFormat.XmlFile:
                    SaveAsXml(streamWriter, ToArray());
                    break;
            }
            streamWriter.Close();
        }

        private void LoadFromBinary(StreamReader streamReader)
        {
            var binaryReader = new BinaryReader(streamReader.BaseStream);
            while (streamReader.BaseStream.Position < streamReader.BaseStream.Length)
            {
                try
                {
                    var group = binaryReader.ReadInt32();
                    var element = binaryReader.ReadInt32();
                    var tag = new Tag(group, element);
                    var length = binaryReader.ReadInt32();
                    var buffer = new byte[length];
                    binaryReader.Read(buffer, 0, length);
                    var description = ByteConvert.ToString(buffer,
                        CharacterRepertoire.Ascii);
                    buffer = new byte[2];
                    binaryReader.Read(buffer, 0, 2);
                    var vr = ByteConvert.ToString(buffer,
                        CharacterRepertoire.Ascii);
                    vr = vr.Trim();
                    length = binaryReader.ReadInt32();
                    buffer = new byte[length];
                    binaryReader.Read(buffer, 0, length);
                    var vm = ByteConvert.ToString(buffer,
                        CharacterRepertoire.Ascii);
                    var retiredBool = binaryReader.ReadBoolean();
                    var retired = retiredBool ? "RET" : null;
                    var entry =
                        new DataElementDictionaryEntry(tag.ToString(),
                            description, vr, vm, retired);
                    Add(entry);
                }
                catch (Exception e)
                {
                    throw new DicomException("Wrong entry before index " +
                                             streamReader.BaseStream.Position + ": " + e.Message);
                }
            }
        }

        private void LoadFromProperty(TextReader textReader)
        {
            var line = textReader.ReadLine();
            var lineNumber = 1;
            string[] result = null;
            while (line != null)
            {
                var lineWithoutSpaces = line.Replace(" ", null);
                if (!lineWithoutSpaces.StartsWith("#") &&
                    !lineWithoutSpaces.Equals(""))
                {
                    if (Regex.IsMatch(lineWithoutSpaces,
                        "^[^=]+=[^,]+,([A-Za-z]{2})?,[0-9\\-nN]+(,RET)?$"))
                    {
                        result = line.Split('=');
                        var tag = result[0];
                        result = result[1].Split(',');
                        var retired = result.Length == 4 ? "RET" : null;
                        try
                        {
                            if (Regex.IsMatch(tag.ToLower(), "(50xx|60xx)"))
                            {
                                // Dicom repeating groups
                                for (var i = 0; i <= 0x1E; i += 2)
                                {
                                    var uniqueTag = tag.ToLower()
                                        .Replace("xx",
                                            string.Format("{0:X2}", i));
                                    var entry =
                                        new DataElementDictionaryEntry(
                                            uniqueTag,
                                            result[0].Trim(), result[1].Trim(),
                                            result[2].Trim(), retired);
                                    Add(entry);
                                }
                            }
                            else if (Regex.IsMatch(tag.ToLower(), "0020,31xx"))
                            {
                                // Not official, but useful!
                                for (var i = 0; i <= 0xFF; i++)
                                {
                                    var uniqueTag = tag.ToLower()
                                        .Replace("xx",
                                            string.Format("{0:X2}", i));
                                    var entry =
                                        new DataElementDictionaryEntry(
                                            uniqueTag,
                                            result[0].Trim(), result[1].Trim(),
                                            result[2].Trim(), retired);
                                    Add(entry);
                                }
                            }
                            else
                            {
                                var entry =
                                    new DataElementDictionaryEntry(tag,
                                        result[0].Trim(), result[1].Trim(),
                                        result[2].Trim(), retired);
                                Add(entry);
                            }
                        }
                        catch (Exception e)
                        {
                            throw new DicomException("Wrong entry in line " +
                                                     lineNumber + ": " + e.Message);
                        }
                    }
                    else
                        throw new DicomException("Wrong entry in line " +
                                                 lineNumber + ".");
                }
                line = textReader.ReadLine();
                lineNumber++;
            }
        }

        private void LoadFromCsv(TextReader textReader)
        {
            var line = textReader.ReadLine();
            var lineNumber = 1;
            string[] result = null;
            while (line != null)
            {
                var lineWithoutSpaces = line.Replace(" ", null);
                if (!lineWithoutSpaces.StartsWith("#") &&
                    !lineWithoutSpaces.Equals(""))
                {
                    if (Regex.IsMatch(lineWithoutSpaces,
                        "^[^;]+;[^;]+;([A-Za-z]{2})?;[0-9\\-nN]+(;RET)?$"))
                    {
                        result = line.Split(';');
                        var tag = result[0];
                        var retired = result.Length == 5 ? "RET" : null;
                        try
                        {
                            if (Regex.IsMatch(tag.ToLower(), "(50xx|60xx)"))
                            {
                                // Dicom repeating groups
                                for (var i = 0; i <= 0x1E; i += 2)
                                {
                                    var uniqueTag = tag.ToLower()
                                        .Replace("xx",
                                            string.Format("{0:X2}", i));
                                    var entry =
                                        new DataElementDictionaryEntry(
                                            uniqueTag,
                                            result[1].Trim(), result[2].Trim(),
                                            result[3].Trim(), retired);
                                    Add(entry);
                                }
                            }
                            else if (Regex.IsMatch(tag.ToLower(), "0020,31xx"))
                            {
                                // Not official, but useful!
                                for (var i = 0; i <= 0xFF; i++)
                                {
                                    var uniqueTag = tag.ToLower()
                                        .Replace("xx",
                                            string.Format("{0:X2}", i));
                                    var entry =
                                        new DataElementDictionaryEntry(
                                            uniqueTag,
                                            result[1].Trim(), result[2].Trim(),
                                            result[3].Trim(), retired);
                                    Add(entry);
                                }
                            }
                            else
                            {
                                var entry =
                                    new DataElementDictionaryEntry(tag,
                                        result[1].Trim(), result[2].Trim(),
                                        result[3].Trim(), retired);
                                Add(entry);
                            }
                        }
                        catch (Exception e)
                        {
                            throw new DicomException("Wrong entry in line " +
                                                     lineNumber + ": " + e.Message);
                        }
                    }
                    else
                        throw new DicomException("Wrong entry in line " +
                                                 lineNumber + ".");
                }
                line = textReader.ReadLine();
                lineNumber++;
            }
        }

        protected virtual void LoadFromXml(TextReader textReader)
        {
            var xmlTextReader = new XmlTextReader(textReader);
            string tag = null;
            string description = null;
            string vr = null;
            string vm = null;
            string retired = null;
            while (xmlTextReader.Read())
            {
                switch (xmlTextReader.Name)
                {
                    case "DictionaryEntry":
                        retired = xmlTextReader["retired"];
                        break;
                    case "Tag":
                        xmlTextReader.MoveToContent();
                        tag = xmlTextReader.ReadString();
                        break;
                    case "Description":
                        xmlTextReader.MoveToContent();
                        description = xmlTextReader.ReadString();
                        break;
                    case "VR":
                        xmlTextReader.MoveToContent();
                        vr = xmlTextReader.ReadString();
                        break;
                    case "VM":
                        xmlTextReader.MoveToContent();
                        vm = xmlTextReader.ReadString();
                        break;
                }
                if (tag != null && description != null && vr != null &&
                    vm != null)
                {
                    try
                    {
                        if (Regex.IsMatch(tag.ToLower(), "(50xx|60xx)"))
                        {
                            // Dicom repeating groups
                            for (var i = 0; i <= 0x1E; i += 2)
                            {
                                var uniqueTag = tag.ToLower()
                                    .Replace("xx", string.Format("{0:X2}", i));
                                var entry =
                                    new DataElementDictionaryEntry(
                                        uniqueTag,
                                        description.Trim(),
                                        vr.Trim(), vm.Trim(), retired);
                                Add(entry);
                            }
                        }
                        else if (Regex.IsMatch(tag.ToLower(), "0020,31xx"))
                        {
                            // Not official, but useful!
                            for (var i = 0; i <= 0xFF; i++)
                            {
                                var uniqueTag = tag.ToLower()
                                    .Replace("xx", string.Format("{0:X2}", i));
                                var entry =
                                    new DataElementDictionaryEntry(
                                        uniqueTag,
                                        description.Trim(), vr.Trim(),
                                        vm.Trim(), retired);
                                Add(entry);
                            }
                        }
                        else
                        {
                            var entry =
                                new DataElementDictionaryEntry(tag,
                                    description.Trim(),
                                    vr.Trim(), vm.Trim(), retired);
                            Add(entry);
                        }
                    }
                    catch (Exception e)
                    {
                        throw new DicomException("Wrong entry at tag " +
                                                 tag + ": " + e.Message);
                    }
                    tag = description = vr = vm = retired = null;
                }
            }
            xmlTextReader.Close();
        }

        private void SaveAsBinary(StreamWriter streamWriter,
            DataElementDictionaryEntry[] entryArray)
        {
            streamWriter.AutoFlush = true;
            var binaryWriter = new BinaryWriter(streamWriter.BaseStream);
            foreach (var entry in entryArray)
            {
                binaryWriter.Write(int.Parse(entry.Tag.Group,
                    NumberStyles.HexNumber));
                binaryWriter.Write(int.Parse(entry.Tag.Element,
                    NumberStyles.HexNumber));
                binaryWriter.Write(entry.Description.Length);
                streamWriter.Write(entry.Description);
                if (entry.VR.IsUndefined)
                    streamWriter.Write("  ");
                else
                    streamWriter.Write(entry.VR.Name);
                binaryWriter.Write(entry.VM.Value.Length);
                streamWriter.Write(entry.VM.Value);
                binaryWriter.Write(entry.IsRetired);
            }
        }

        private void SaveAsProperty(TextWriter textWriter,
            DataElementDictionaryEntry[] entryArray)
        {
            textWriter.WriteLine("# " + fileComment);
            foreach (var entry in entryArray)
            {
                if (entry.IsRetired)
                    textWriter.WriteLine(entry.Tag + " = " +
                                         entry.Description + ", " + entry.VR.Name +
                                         ", " + entry.VM + ", RET");
                else
                    textWriter.WriteLine(entry.Tag + " = " +
                                         entry.Description + ", " + entry.VR.Name +
                                         ", " + entry.VM);
            }
        }

        private void SaveAsCsv(TextWriter textWriter,
            DataElementDictionaryEntry[] entryArray)
        {
            textWriter.WriteLine("# " + fileComment);
            foreach (var entry in entryArray)
            {
                if (entry.IsRetired)
                    textWriter.WriteLine(entry.Tag + "; " +
                                         entry.Description + "; " + entry.VR.Name +
                                         "; " + entry.VM + "; RET");
                else
                    textWriter.WriteLine(entry.Tag + "; " +
                                         entry.Description + "; " + entry.VR.Name +
                                         "; " + entry.VM);
            }
        }

        protected virtual void SaveAsXml(TextWriter textWriter,
            DataElementDictionaryEntry[] entryArray)
        {
            var xmlTextWriter = new XmlTextWriter(textWriter);
            xmlTextWriter.Formatting = Formatting.Indented;
            xmlTextWriter.Indentation = 4;
            xmlTextWriter.WriteStartDocument();
            xmlTextWriter.WriteComment(" " + fileComment + " ");
            xmlTextWriter.WriteStartElement("DicomDataDictionary");
            foreach (var entry in entryArray)
            {
                xmlTextWriter.WriteStartElement("DictionaryEntry");
                if (entry.IsRetired)
                    xmlTextWriter.WriteAttributeString("retired", "true");
                xmlTextWriter.WriteElementString("Tag",
                    entry.Tag.ToString());
                xmlTextWriter.WriteElementString("Description",
                    entry.Description);
                xmlTextWriter.WriteElementString("VR", entry.VR.Name);
                xmlTextWriter.WriteElementString("VM", entry.VM.Value);
                xmlTextWriter.WriteEndElement();
            }
            xmlTextWriter.WriteEndElement();
            xmlTextWriter.Close();
        }

        public DataElementDictionaryEntry[] ToArray()
        {
            var entryArray =
                new DataElementDictionaryEntry[hashTable.Count];
            hashTable.Values.CopyTo(entryArray, 0);
            Array.Sort(entryArray);
            return entryArray;
        }

        public void Add(DataElementDictionaryEntry entry)
        {
            if (entry != null)
            {
                if (!Contains(entry.Tag))
                    hashTable.Add(entry.Tag.ToString(), entry);
                else
                    throw new DicomException(
                        "Tag already exists in data element dictionary.",
                        "entry.Tag", entry.Tag.ToString());
            }
            else
                throw new DicomException("entry is null.", "entry");
        }

        public void Clear()
        {
            hashTable.Clear();
        }

        public bool Contains(Tag tag)
        {
            return hashTable.Contains(tag.ToString());
        }

        public DataElementDictionaryEntry GetDictionaryEntry(Tag tag)
        {
            return this[tag];
        }
    }
}